<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Finder</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css" integrity="sha512-h9FcoyWjHcOcmEVkxOfTLnmZFWIH0iZhZT1H2TbOq55xssQGEJHEaIm+PgoUaZbRvQTNTluNOEfb1ZRy6D3BOw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Modal styles */
        #complaintModal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 300px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>Find Your Current Location</h1>

    <button id="use-location">Use my current location</button><br><br>
    <button id="raise-complaint" style="background-color: red; color: white; position: absolute; top: 20px; right: 20px; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">
        Raise a Complaint
    </button>
    
    <div id="map" style="height: 500px;"></div>

    <!-- Modal for complaint submission -->
    <div id="complaintModal">
        <div class="modal-content">
            <h2>Submit a Complaint</h2>
            <label for="complaint">Complaint:</label>
            <input type="text" id="complaint" required><br><br>
            <label for="location">Location:</label>
            <input type="text" id="location" required><br><br>
            <button id="submit-complaint">Submit</button>
            <button id="close-modal">Close</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js" integrity="sha512-BwHfrr4c9kmRkLw6iXFdzcdWV/PGkVgiIyIWLLlTSXzWQzxuSg4DiQUCpauz/EWjgk5TYQqX/kvn9pG1NpYfqg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
    <script>
        let socket = io();
        let map;
        let marker;

        // Initialize map centered at a default location
        function initializeMap(lat = 0, lon = 0, zoomLevel = 2) {
            map = L.map("map").setView([lat, lon], zoomLevel);

            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            }).addTo(map);
        }

        // Call initializeMap to create an empty map
        initializeMap();

        document.getElementById("use-location").addEventListener("click", () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const { latitude, longitude } = position.coords;
                        
                        // If marker exists, remove it
                        if (marker) {
                            map.removeLayer(marker);
                        }

                        // Center map on the user's current location
                        map.setView([latitude, longitude], 16);

                        // Add a marker at the current location
                        marker = L.marker([latitude, longitude]).addTo(map);

                        // Send the location to other users via socket
                        socket.emit("send-location", { latitude, longitude });

                        alert("Your current location is displayed on the map.");
                    },
                    (error) => {
                        alert("Error retrieving your location.");
                        console.error("Geolocation error:", error);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 5000,
                        maximumAge: 0,
                    }
                );
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        });

        document.getElementById("raise-complaint").addEventListener("click", () => {
            document.getElementById("complaintModal").style.display = "block";
        });

        document.getElementById("close-modal").addEventListener("click", () => {
            document.getElementById("complaintModal").style.display = "none";
        });

        document.getElementById("submit-complaint").addEventListener("click", () => {
            const complaint = document.getElementById("complaint").value;
            const location = document.getElementById("location").value;

            if (complaint && location) {
                // Store in local storage
                const complaints = JSON.parse(localStorage.getItem("complaints")) || [];
                complaints.push({ complaint, location });
                localStorage.setItem("complaints", JSON.stringify(complaints));

                // Geocode the location to get its coordinates
                fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length > 0) {
                            const lat = parseFloat(data[0].lat);
                            const lon = parseFloat(data[0].lon);
                            
                            // Add a red marker at the specified location
                            const complaintMarker = L.marker([lat, lon], { icon: L.icon({ iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/6/63/Red_marker.png', iconSize: [25, 41] }) }).addTo(map);

                            // Show complaint details when the marker is clicked
                            complaintMarker.on('click', () => {
                                alert(`Complaint: ${complaint}\nLocation: ${location}`);
                            });

                            // Center the map on the new marker
                            map.setView([lat, lon], 16);
                        } else {
                            alert("Location not found. Please enter a valid location.");
                        }
                    })
                    .catch(error => {
                        console.error("Error during geocoding:", error);
                        alert("An error occurred while geocoding the location.");
                    });

                alert("Complaint submitted successfully!");
                // Close the modal
                document.getElementById("complaintModal").style.display = "none";
                // Clear the input fields
                document.getElementById("complaint").value = '';
                document.getElementById("location").value = '';
            } else {
                alert("Please fill in all fields.");
            }
        });

        socket.on("receive-location", (data) => {
            const { id, latitude, longitude } = data;
            console.log(`Received Location - ID: ${id}, Latitude: ${latitude}, Longitude: ${longitude}`);

            // Optionally, show other users' locations on the map (if needed)
        });

        socket.on("user-disconnected", (id) => {
            console.log(`User with ID ${id} disconnected`);
        });
    </script>
</body>
</html>
